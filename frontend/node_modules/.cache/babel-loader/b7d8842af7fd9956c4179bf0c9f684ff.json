{"ast":null,"code":"import { USER_LOADED, USER_LOADING, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT_SUCCESS, REGISTER_SUCCESS, REGISTER_FAIL } from '../actions/types';\nconst initialState = {\n  token: localStorage.getItem('token'),\n  // token which is comes from localstorage if there is one set \n  isAuthenticated: null,\n  isLoading: false,\n  isLoggedIn: false,\n  user: null\n};\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case USER_LOADING:\n      return { ...state,\n        isLoading: true\n      };\n\n    case USER_LOADED:\n      // USER_LOADED run all the time with every request to see if we are logged in or not\n      return { ...state,\n        isAuthenticated: true,\n        // auth is true because we went and validated on backend got the user ans set that true\n        isLoading: false,\n        // set false because user is now loaded\n        user: action.payload // we send th user as the payload\n\n      };\n\n    case LOGIN_SUCCESS:\n      localStorage.setItem('token', action.payload.token);\n      return { ...state,\n        ...action.payload,\n        // getting the token which is going to be included in the payload. action.payload going to have the user and token. \n        isAuthenticated: true,\n        //Remember that's what we are sending back from the backend and then is authenticated true and loading is false\n        isLoading: false,\n        isLoggedIn: true\n      };\n\n    case REGISTER_SUCCESS:\n      localStorage.setItem('token', action.payload.token);\n      alert(\"Successfully Registered\");\n      return { ...state,\n        ...action.payload,\n        // getting the token which is going to be included in the payload. action.payload going to have the user and token. \n        isAuthenticated: true,\n        //Remember that's what we are sending back from the backend and then is authenticated true and loading is false\n        isLoading: false\n      };\n\n    case AUTH_ERROR:\n    case LOGIN_FAIL:\n    case LOGOUT_SUCCESS:\n    case REGISTER_FAIL:\n      localStorage.removeItem('token');\n      return { ...state,\n        token: null,\n        user: null,\n        isAuthenticated: false,\n        isLoading: false\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["E:/sportsclubapp-master/frontend/src/reducers/authReducer.js"],"names":["USER_LOADED","USER_LOADING","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT_SUCCESS","REGISTER_SUCCESS","REGISTER_FAIL","initialState","token","localStorage","getItem","isAuthenticated","isLoading","isLoggedIn","user","state","action","type","payload","setItem","alert","removeItem"],"mappings":"AAAA,SACIA,WADJ,EAEIC,YAFJ,EAGIC,UAHJ,EAIIC,aAJJ,EAKIC,UALJ,EAMIC,cANJ,EAOIC,gBAPJ,EAQIC,aARJ,QASS,kBATT;AAWE,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAEC,YAAY,CAACC,OAAb,CAAqB,OAArB,CADY;AACmB;AACtCC,EAAAA,eAAe,EAAE,IAFE;AAGnBC,EAAAA,SAAS,EAAE,KAHQ;AAInBC,EAAAA,UAAU,EAAE,KAJO;AAKnBC,EAAAA,IAAI,EAAE;AALa,CAArB;AAQA,eAAe,UAASC,KAAK,GAAGR,YAAjB,EAA+BS,MAA/B,EAAuC;AACpD,UAAOA,MAAM,CAACC,IAAd;AACE,SAAKjB,YAAL;AACE,aAAO,EACL,GAAGe,KADE;AAELH,QAAAA,SAAS,EAAE;AAFN,OAAP;;AAIF,SAAKb,WAAL;AAAkB;AAChB,aAAO,EACL,GAAGgB,KADE;AAELJ,QAAAA,eAAe,EAAE,IAFZ;AAEkB;AACvBC,QAAAA,SAAS,EAAE,KAHN;AAGY;AAEjBE,QAAAA,IAAI,EAAEE,MAAM,CAACE,OALR,CAKgB;;AALhB,OAAP;;AAOF,SAAKhB,aAAL;AACEO,MAAAA,YAAY,CAACU,OAAb,CAAqB,OAArB,EAA8BH,MAAM,CAACE,OAAP,CAAeV,KAA7C;AACA,aAAO,EACL,GAAGO,KADE;AAEL,WAAGC,MAAM,CAACE,OAFL;AAEc;AACnBP,QAAAA,eAAe,EAAE,IAHZ;AAGkB;AACvBC,QAAAA,SAAS,EAAE,KAJN;AAKLC,QAAAA,UAAU,EAAC;AALN,OAAP;;AAOF,SAAKR,gBAAL;AACEI,MAAAA,YAAY,CAACU,OAAb,CAAqB,OAArB,EAA8BH,MAAM,CAACE,OAAP,CAAeV,KAA7C;AACAY,MAAAA,KAAK,CAAC,yBAAD,CAAL;AACA,aAAO,EACL,GAAGL,KADE;AAEL,WAAGC,MAAM,CAACE,OAFL;AAEc;AACnBP,QAAAA,eAAe,EAAE,IAHZ;AAGkB;AACvBC,QAAAA,SAAS,EAAE;AAJN,OAAP;;AAOF,SAAKX,UAAL;AACA,SAAKE,UAAL;AACA,SAAKC,cAAL;AACA,SAAKE,aAAL;AACEG,MAAAA,YAAY,CAACY,UAAb,CAAwB,OAAxB;AACA,aAAO,EACL,GAAGN,KADE;AAELP,QAAAA,KAAK,EAAE,IAFF;AAGLM,QAAAA,IAAI,EAAE,IAHD;AAILH,QAAAA,eAAe,EAAE,KAJZ;AAKLC,QAAAA,SAAS,EAAE;AALN,OAAP;;AAOF;AACE,aAAOG,KAAP;AA9CJ;AAgDD","sourcesContent":["import {\n    USER_LOADED,\n    USER_LOADING,\n    AUTH_ERROR,\n    LOGIN_SUCCESS,\n    LOGIN_FAIL,\n    LOGOUT_SUCCESS,\n    REGISTER_SUCCESS,\n    REGISTER_FAIL\n  } from '../actions/types';\n\n  const initialState = {\n    token: localStorage.getItem('token'), // token which is comes from localstorage if there is one set \n    isAuthenticated: null, \n    isLoading: false,\n    isLoggedIn: false,\n    user: null\n  };\n\n  export default function(state = initialState, action) {\n    switch(action.type) {\n      case USER_LOADING:\n        return {\n          ...state,\n          isLoading: true\n        };\n      case USER_LOADED: // USER_LOADED run all the time with every request to see if we are logged in or not\n        return {\n          ...state,\n          isAuthenticated: true, // auth is true because we went and validated on backend got the user ans set that true\n          isLoading: false,// set false because user is now loaded\n          \n          user: action.payload // we send th user as the payload\n        };\n      case LOGIN_SUCCESS:\n        localStorage.setItem('token', action.payload.token)\n        return {\n          ...state,\n          ...action.payload, // getting the token which is going to be included in the payload. action.payload going to have the user and token. \n          isAuthenticated: true, //Remember that's what we are sending back from the backend and then is authenticated true and loading is false\n          isLoading: false,\n          isLoggedIn:true\n        };\n      case REGISTER_SUCCESS:\n        localStorage.setItem('token', action.payload.token)\n        alert(\"Successfully Registered\")\n        return {\n          ...state,\n          ...action.payload, // getting the token which is going to be included in the payload. action.payload going to have the user and token. \n          isAuthenticated: true, //Remember that's what we are sending back from the backend and then is authenticated true and loading is false\n          isLoading: false,\n  \n        };\n      case AUTH_ERROR:\n      case LOGIN_FAIL:\n      case LOGOUT_SUCCESS:\n      case REGISTER_FAIL:\n        localStorage.removeItem('token');\n        return {\n          ...state,\n          token: null,\n          user: null,\n          isAuthenticated: false,\n          isLoading: false\n        };\n      default:\n        return state;\n    }\n  }"]},"metadata":{},"sourceType":"module"}