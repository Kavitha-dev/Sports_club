{"ast":null,"code":"import axios from 'axios';\nimport { returnErrors } from './errorActions';\nimport { USER_LOADED, USER_LOADING, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT_SUCCESS, REGISTER_SUCCESS, REGISTER_FAIL } from './types'; // Check token and load user\n\nexport const loadUser = () => (dispatch, getState) => {\n  // User loading\n  dispatch({\n    type: USER_LOADING\n  });\n  axios.get('/api/loginauth/user', tokenConfig(getState)).then(res => dispatch({\n    type: USER_LOADED,\n    payload: res.data // sending whole thing res.data which should be the user and ite should be an object with the user object an token itself\n\n  })).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status));\n    dispatch({\n      type: AUTH_ERROR\n    });\n  });\n}; // Register User\n\nexport const register = ({\n  name,\n  email,\n  password\n}) => dispatch => {\n  // Headers\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }; // Request body\n\n  const body = JSON.stringify({\n    name,\n    email,\n    password\n  });\n  axios.post('/api/users', body, config).then(res => dispatch({\n    type: REGISTER_SUCCESS,\n    payload: res.data\n  })).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status, 'REGISTER_FAIL'));\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  });\n}; // Login User\n\nexport const login = ({\n  email,\n  password\n}) => dispatch => {\n  // Headers\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }; // Request body\n\n  const body = JSON.stringify({\n    email,\n    password\n  });\n  axios.post('/api/loginauth', body, config).then(res => dispatch({\n    type: LOGIN_SUCCESS,\n    payload: res.data\n  })).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status, 'LOGIN_FAIL'));\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  });\n}; // Logout User\n\nexport const logout = () => {\n  return {\n    type: LOGOUT_SUCCESS\n  };\n}; //Setup config/headers and token\n\nexport const tokenConfig = getState => {\n  //Get token from loacalstorage\n  const token = getState().auth.token; //Headers \n\n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\"\n    }\n  }; // If token, add to headers\n\n  if (token) {\n    config.headers['x-auth-token'] = token;\n  }\n\n  return config;\n};","map":{"version":3,"sources":["E:/sportsclubapp-master/frontend/src/actions/authActions.js"],"names":["axios","returnErrors","USER_LOADED","USER_LOADING","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT_SUCCESS","REGISTER_SUCCESS","REGISTER_FAIL","loadUser","dispatch","getState","type","get","tokenConfig","then","res","payload","data","catch","err","response","status","register","name","email","password","config","headers","body","JSON","stringify","post","login","logout","token","auth"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { returnErrors } from './errorActions'\nimport {\n    USER_LOADED,\n    USER_LOADING,\n    AUTH_ERROR,\n    LOGIN_SUCCESS,\n    LOGIN_FAIL,\n    LOGOUT_SUCCESS,\n    REGISTER_SUCCESS,\n    REGISTER_FAIL\n} from './types';\n\n// Check token and load user\nexport const loadUser = () => (dispatch, getState) => {\n    // User loading\n    dispatch({ type: USER_LOADING });\n\n    axios.get('/api/loginauth/user', tokenConfig(getState))\n        .then(res => dispatch({\n            type: USER_LOADED,\n            payload: res.data // sending whole thing res.data which should be the user and ite should be an object with the user object an token itself\n        }))\n        .catch(err => {\n            dispatch(returnErrors(err.response.data, err.response.status));\n            dispatch({\n                type: AUTH_ERROR\n            });\n        });\n\n};\n\n// Register User\nexport const register = ({ name, email, password }) => dispatch => {\n\n    // Headers\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    };\n\n    // Request body\n    const body = JSON.stringify({ name, email, password });\n\n    axios.post('/api/users', body, config)\n        .then(res => dispatch({\n            type: REGISTER_SUCCESS,\n            payload: res.data\n        })\n        )\n        .catch(err => {\n            dispatch(\n                returnErrors(err.response.data, err.response.status, 'REGISTER_FAIL')\n            );\n            dispatch({\n                type: REGISTER_FAIL\n            });\n        });\n};\n\n\n// Login User\nexport const login = ({ email, password }) => dispatch => {\n    // Headers\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    };\n\n    // Request body\n    const body = JSON.stringify({ email, password });\n\n    axios.post('/api/loginauth', body, config)\n        .then(res =>\n            dispatch({\n                type: LOGIN_SUCCESS,\n                payload: res.data\n            })\n        )\n        .catch(err => {\n            dispatch(returnErrors(err.response.data, err.response.status, 'LOGIN_FAIL'));\n            dispatch({\n                type: LOGIN_FAIL\n            });\n        });\n}\n\n// Logout User\nexport const logout = () => {\n    return {\n        type: LOGOUT_SUCCESS\n    };\n};\n\n//Setup config/headers and token\nexport const tokenConfig = getState => {\n\n    //Get token from loacalstorage\n    const token = getState().auth.token;\n\n    //Headers \n    const config = {\n        headers: {\n            \"Content-type\": \"application/json\"\n        }\n    };\n\n    // If token, add to headers\n    if (token) {\n        config.headers['x-auth-token'] = token;\n    }\n    return config;\n\n}"]},"metadata":{},"sourceType":"module"}